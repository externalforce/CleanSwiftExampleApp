//
//  ProductListPresenterTests.swift
//  CicekSepetiCaseApp
//
//  Created by KS Murat Turan on 18.07.2019.
//  Copyright (c) 2019 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CicekSepetiCaseApp
import XCTest

class ProductListPresenterTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ProductListPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupProductListPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupProductListPresenter()
  {
    sut = ProductListPresenter()
  }
  
  // MARK: Test doubles
  
  class ProductListDisplayLogicSpy: ProductListDisplayLogic {
    // MARK: Method call expectations
    var displayProductsCalled = false
    var displayErrorCalled = false

    // MARK: Spied methods
    func displayProducts(viewModel: ProductList.GetProducts.ViewModel) {
        displayProductsCalled = true
    }
    func displayEmpty(_ message: String) {}
    func displayError(_ message: String) {
        displayErrorCalled = true
    }
  }
  
  // MARK: Tests
  
  func testPresentProducts()
  {
    // Given
    let productListDisplayLogicSpy = ProductListDisplayLogicSpy()
    sut.viewController = productListDisplayLogicSpy
    let expectation = self.expectation(description: "Wait for fetchProducts to return.")
    var products: [ProductModel]?
    let worker = ProductListWorker()
    worker.fetchProductList(success: { (productBaseModel) in
        expectation.fulfill()
        products = productBaseModel.result?.data?.products
    }) { (error) in
        expectation.fulfill()
    }
    waitForExpectations(timeout: 60)
    let successfulResponse = ProductList.GetProducts.Response(productListModel: products, message: nil)
    let failedResponse = ProductList.GetProducts.Response(productListModel: nil, message: "Fake Error Message")
    
    // When
    sut.presentFetchedProducts(response: successfulResponse)
    sut.presentFetchedProducts(response: failedResponse)
    
    // Then
    XCTAssertTrue(productListDisplayLogicSpy.displayProductsCalled, "presentFetchedProducts(response:) should ask the view controller to display the result")
    XCTAssertTrue(productListDisplayLogicSpy.displayErrorCalled, "If message is not nil presentError will be called.")
  }
}
